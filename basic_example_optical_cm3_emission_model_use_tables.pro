;+
; AUTHOR: Edward G. Nerney
; 
; OPTICAL EMISSION MODEL FOR IO PLASMA TORUS - TABLE-BASED VERSION
; =================================================================
; This code simulates optical emission spectra from the Io Plasma Torus (IPT) in
; Jupiter's magnetosphere using pre-calculated CHIANTI emission tables.
;
; TARGET INSTRUMENT:
; - DIS (Dual Imaging Spectrograph) at Apache Point Observatory (APO)
; - High resolution mode: 0.62 Å/pixel
; - Spectral resolution (FWHM): 1.86 Å (3x bin width)
; - Wavelength coverage: 3200-7500 Å (optical range)
;
; PHYSICAL MODEL:
; - Uses pre-calculated emissivities from CHIANTI 11.0.2
; - Supports both single and double Maxwellian electron distributions
; - Double Maxwellian uses proper 4D interpolation (not linear superposition)
; - Converts atomic emissivities to observable Rayleigh intensities
; - Applies realistic instrument response function for DIS/APO
;
; KEY ASSUMPTIONS:
; - Optically thin plasma (no absorption/scattering)
; - Electron impact excitation dominates (photoexcitation negligible)
; - Local thermodynamic equilibrium NOT assumed (uses CHIANTI non-LTE calculations)
; - Line-of-sight integration approximated by column densities
;
; OPTICAL EMISSION LINES:
; In the optical range (3200-7500 Å), the IPT shows:
; - Forbidden lines: [S II] 6716,6731 Å, [S III] 6312,9069,9531 Å, [O II] 3726,3729 Å
; - Permitted lines: Various S and O multiplets
; - Auroral lines: [O I] 5577,6300,6364 Å (if neutral O present)
; These lines are diagnostic of plasma conditions and composition.
;
; REQUIRED FILES:
; - Single Maxwellian: CHIANTI_11.0.2_emiss_arrays_all_species_all_wavelengths_50x50_logspaced.sav
; - Double Maxwellian: CHIANTI_11.0.2_emiss_arrays_all_species_all_wavelengths_15x10x20x10_hote_logspaced.sav
;   (Generated by make_emission_tables_chianti11.pro)
;
; REFERENCES:
; - Nerney et al. 2017, 2020, 2022, & 2025
; - Steffl et al. 2004b, 2006 (optical observations)
; - Brown et al. 1983 (S II and S III optical diagnostics)
; - CHIANTI atomic database (Dere et al. 1997, Del Zanna et al. 2020, & Dufresne et al. 2024)
; - CHIANTI is a collaborative project involving George Mason University,
;   the University of Michigan (USA), University of Cambridge (UK)
;   and NASA Goddard Space Flight Center (USA).
;
; Author: IDL implementation for open-access community use
; License: Open source for academic and research use
;-

;==============================================================================
function interpolate_emissivity_2D, temp_eV, dens_cm3, temp_arr, dens_arr, emiss_table
  ;+
  ; NAME:
  ;   interpolate_emissivity_2D
  ;
  ; PURPOSE:
  ;   Use IDL's GRIDDATA function to interpolate 2D emissivities for single
  ;   Maxwellian case at specific temperature and density.
  ;
  ; INPUTS:
  ;   temp_eV    - Electron temperature [eV] to interpolate at
  ;   dens_cm3   - Electron density [cm^-3] to interpolate at
  ;   temp_arr   - Temperature grid from tables [eV]
  ;   dens_arr   - Density grid from tables [cm^-3]
  ;   emiss_table - 3D emissivity table [n_temp, n_dens, n_lines]
  ;
  ; OUTPUTS:
  ;   Returns 1D array of interpolated emissivities for all wavelengths
  ;
  ; METHOD:
  ;   Uses IDL's GRIDDATA function with linear interpolation in log10(T) - log10(n)
  ;   space for smooth interpolation of emissivities which vary as power laws.
  ;
  ; PHYSICS NOTES:
  ;   For forbidden optical transitions:
  ;   - Critical density effects become important at higher densities
  ;   - Collisional de-excitation competes with radiative decay
  ;   - Tables include these density-dependent effects
  ;-

  ; Get dimensions
  n_temp = n_elements(temp_arr)
  n_dens = n_elements(dens_arr)
  n_lines = (size(emiss_table))[3]

  ; Convert to log10 space for interpolation
  log10_temp = alog10(temp_eV)
  log10_dens = alog10(dens_cm3)
  log10_temp_arr = alog10(temp_arr)
  log10_dens_arr = alog10(dens_arr)

  ; Create 2D grid of input points for GRIDDATA
  ; Need to flatten the grid into lists of X,Y coordinates
  temp_grid = rebin(log10_temp_arr, n_temp, n_dens)
  dens_grid = rebin(reform(log10_dens_arr, 1, n_dens), n_temp, n_dens)

  ; Flatten the coordinate grids
  x_points = reform(temp_grid, n_temp * n_dens)
  y_points = reform(dens_grid, n_temp * n_dens)

  ; Compute Delaunay triangulation once (required for LINEAR method)
  TRIANGULATE, x_points, y_points, triangles

  ; Initialize output array
  emiss_interp = dblarr(n_lines)

  ; Interpolate each wavelength separately
  for i = 0, n_lines - 1 do begin
    ; Extract and flatten the emissivity values for this wavelength
    f_values = reform(emiss_table[*, *, i], n_temp * n_dens)

    ; Use GRIDDATA to interpolate at the desired point
    ; Using LINEAR method for smooth interpolation
    interp_value = GRIDDATA(x_points, y_points, f_values, $
      /LINEAR, TRIANGLES=triangles, /GRID, $
      XOUT=[log10_temp], YOUT=[log10_dens], $
      MISSING=0d)

    emiss_interp[i] = interp_value
  endfor

  ; Handle any negative values from interpolation (set to zero)
  neg_idx = where(emiss_interp lt 0, n_neg)
  if n_neg gt 0 then emiss_interp[neg_idx] = 0d

  return, emiss_interp
end

;==============================================================================
function interpolate_emissivity_4D, Tec_eV, Teh_eV, ne_cm3, feh, $
  tec_arr, teh_arr, ne_arr, feh_arr, emiss_table
  ;+
  ; NAME:
  ;   interpolate_emissivity_4D
  ;
  ; PURPOSE:
  ;   Interpolate 4D emissivity tables for double Maxwellian case.
  ;   Uses proper 4D interpolation since emission is nonlinear in the parameters.
  ;
  ; INPUTS:
  ;   Tec_eV      - Core electron temperature [eV]
  ;   Teh_eV      - Hot electron temperature [eV]
  ;   ne_cm3      - Total electron density [cm^-3]
  ;   feh         - Hot electron fraction
  ;   tec_arr     - Core temperature grid [eV]
  ;   teh_arr     - Hot temperature grid [eV]
  ;   ne_arr      - Density grid [cm^-3]
  ;   feh_arr     - Hot fraction grid
  ;   emiss_table - 5D table [n_tec, n_teh, n_ne, n_feh, n_lines]
  ;
  ; OUTPUTS:
  ;   Returns 1D array of interpolated emissivities
  ;
  ; METHOD:
  ;   Uses 4D linear interpolation in log space for temperatures and densities.
  ;   Linear interpolation in normal space for fraction.
  ;
  ; PHYSICS NOTES:
  ;   For optical forbidden lines:
  ;   - Hot electrons have minimal effect on low-lying metastable levels
  ;   - Main enhancement is for higher excitation transitions
  ;   - Critical density effects are included in the tables
  ;-

  ; Get dimensions
  n_tec = n_elements(tec_arr)
  n_teh = n_elements(teh_arr)
  n_ne = n_elements(ne_arr)
  n_feh = n_elements(feh_arr)
  n_lines = (size(emiss_table))[5]

  ; Convert to appropriate interpolation spaces
  log10_tec = alog10(Tec_eV)
  log10_teh = alog10(Teh_eV)
  log10_ne = alog10(ne_cm3)

  log10_tec_arr = alog10(tec_arr)
  log10_teh_arr = alog10(teh_arr)
  log10_ne_arr = alog10(ne_arr)

  ; Find indices for interpolation using VALUE_LOCATE
  itec = value_locate(log10_tec_arr, log10_tec)
  iteh = value_locate(log10_teh_arr, log10_teh)
  ine = value_locate(log10_ne_arr, log10_ne)
  ifeh = value_locate(feh_arr, feh)

  ; Handle edge cases
  if itec lt 0 then itec = 0
  if itec ge n_tec-1 then itec = n_tec-2
  if iteh lt 0 then iteh = 0
  if iteh ge n_teh-1 then iteh = n_teh-2
  if ine lt 0 then ine = 0
  if ine ge n_ne-1 then ine = n_ne-2
  if ifeh lt 0 then ifeh = 0
  if ifeh ge n_feh-1 then ifeh = n_feh-2

  ; Calculate interpolation weights
  wtec = (log10_tec - log10_tec_arr[itec]) / (log10_tec_arr[itec+1] - log10_tec_arr[itec])
  wteh = (log10_teh - log10_teh_arr[iteh]) / (log10_teh_arr[iteh+1] - log10_teh_arr[iteh])
  wne = (log10_ne - log10_ne_arr[ine]) / (log10_ne_arr[ine+1] - log10_ne_arr[ine])
  wfeh = (feh - feh_arr[ifeh]) / (feh_arr[ifeh+1] - feh_arr[ifeh])

  ; Initialize output
  emiss_interp = dblarr(n_lines)

  ; Perform 4D linear interpolation for each wavelength
  for iline = 0, n_lines - 1 do begin
    ; Extract the 16 corner points of the 4D hypercube
    v0000 = emiss_table[itec,   iteh,   ine,   ifeh,   iline]
    v0001 = emiss_table[itec,   iteh,   ine,   ifeh+1, iline]
    v0010 = emiss_table[itec,   iteh,   ine+1, ifeh,   iline]
    v0011 = emiss_table[itec,   iteh,   ine+1, ifeh+1, iline]
    v0100 = emiss_table[itec,   iteh+1, ine,   ifeh,   iline]
    v0101 = emiss_table[itec,   iteh+1, ine,   ifeh+1, iline]
    v0110 = emiss_table[itec,   iteh+1, ine+1, ifeh,   iline]
    v0111 = emiss_table[itec,   iteh+1, ine+1, ifeh+1, iline]
    v1000 = emiss_table[itec+1, iteh,   ine,   ifeh,   iline]
    v1001 = emiss_table[itec+1, iteh,   ine,   ifeh+1, iline]
    v1010 = emiss_table[itec+1, iteh,   ine+1, ifeh,   iline]
    v1011 = emiss_table[itec+1, iteh,   ine+1, ifeh+1, iline]
    v1100 = emiss_table[itec+1, iteh+1, ine,   ifeh,   iline]
    v1101 = emiss_table[itec+1, iteh+1, ine,   ifeh+1, iline]
    v1110 = emiss_table[itec+1, iteh+1, ine+1, ifeh,   iline]
    v1111 = emiss_table[itec+1, iteh+1, ine+1, ifeh+1, iline]

    ; 4D linear interpolation
    emiss_interp[iline] = $
      v0000 * (1-wtec) * (1-wteh) * (1-wne) * (1-wfeh) + $
      v0001 * (1-wtec) * (1-wteh) * (1-wne) * wfeh + $
      v0010 * (1-wtec) * (1-wteh) * wne * (1-wfeh) + $
      v0011 * (1-wtec) * (1-wteh) * wne * wfeh + $
      v0100 * (1-wtec) * wteh * (1-wne) * (1-wfeh) + $
      v0101 * (1-wtec) * wteh * (1-wne) * wfeh + $
      v0110 * (1-wtec) * wteh * wne * (1-wfeh) + $
      v0111 * (1-wtec) * wteh * wne * wfeh + $
      v1000 * wtec * (1-wteh) * (1-wne) * (1-wfeh) + $
      v1001 * wtec * (1-wteh) * (1-wne) * wfeh + $
      v1010 * wtec * (1-wteh) * wne * (1-wfeh) + $
      v1011 * wtec * (1-wteh) * wne * wfeh + $
      v1100 * wtec * wteh * (1-wne) * (1-wfeh) + $
      v1101 * wtec * wteh * (1-wne) * wfeh + $
      v1110 * wtec * wteh * wne * (1-wfeh) + $
      v1111 * wtec * wteh * wne * wfeh
  endfor

  ; Handle any negative values
  neg_idx = where(emiss_interp lt 0, n_neg)
  if n_neg gt 0 then emiss_interp[neg_idx] = 0d

  return, emiss_interp
end

;==============================================================================
function calculate_IPT_emiss_tables_single, Tel, nel, Nsp, Ns2p, Ns3p, Ns4p, Nop, No2p, $
  temp_arr, dens_arr, xwavi_struct, yptsi_struct, $
  min = min, max = max, xwavi=xwavi
  ;+
  ; NAME:
  ;   calculate_IPT_emiss_tables_single
  ;
  ; PURPOSE:
  ;   Calculate optical emission line intensities for a SINGLE Maxwellian electron
  ;   distribution using pre-calculated emission tables.
  ;
  ; INPUTS:
  ;   Tel          - Electron temperature [eV]
  ;   nel          - Electron number density [#/cm^3]
  ;   Nsp          - S+ (S II) column density [#/cm^2]
  ;   Ns2p         - S++ (S III) column density [#/cm^2]
  ;   Ns3p         - S+++ (S IV) column density [#/cm^2]
  ;   Ns4p         - S++++ (S V) column density [#/cm^2]
  ;   Nop          - O+ (O II) column density [#/cm^2]
  ;   No2p         - O++ (O III) column density [#/cm^2]
  ;   temp_arr     - Temperature grid from tables [eV]
  ;   dens_arr     - Density grid from tables [cm^-3]
  ;   xwavi_struct - Structure containing wavelength arrays for each ion
  ;   yptsi_struct - Structure containing emissivity tables for each ion
  ;
  ; KEYWORDS:
  ;   min    - Minimum wavelength [Angstroms], default=3200
  ;   max    - Maximum wavelength [Angstroms], default=7500
  ;   xwavi  - OUTPUT: Array of emission line wavelengths [Angstroms]
  ;
  ; OUTPUTS:
  ;   Returns 1D array of line intensities in Rayleighs
  ;
  ; OPTICAL LINES:
  ;   Key diagnostic lines in this range:
  ;   - [S II] 4068,4076 Å (auroral), 6716,6731 Å (nebular)
  ;   - [S III] 6312 Å (auroral), 9069,9531 Å (nebular)
  ;   - [O II] 3726,3729 Å (nebular doublet), 7319,7330 Å (auroral)
  ;   - [O III] 4363 Å (auroral), 4959,5007 Å (nebular)
  ;-

  ; Set wavelength range for optical
  if keyword_set(max) then maxwav = max else maxwav = 7500d
  if keyword_set(min) then minwav = min else minwav = 3200d

  ; ============================================================================
  ; INTERPOLATE EMISSIVITIES FOR EACH ION
  ; ============================================================================

  print, 'Calculating single Maxwellian optical emission using tables...'

  ; S+ (S II - strong optical forbidden lines)
  emiss_sp = interpolate_emissivity_2D(Tel, nel, temp_arr, dens_arr, yptsi_struct.sp)

  ; S++ (S III - bright optical lines)
  emiss_s2p = interpolate_emissivity_2D(Tel, nel, temp_arr, dens_arr, yptsi_struct.s2p)

  ; S+++ (S IV - weaker optical lines)
  emiss_s3p = interpolate_emissivity_2D(Tel, nel, temp_arr, dens_arr, yptsi_struct.s3p)

  ; S++++ (S V - very weak in optical)
  emiss_s4p = interpolate_emissivity_2D(Tel, nel, temp_arr, dens_arr, yptsi_struct.s4p)

  ; O+ (O II - strong forbidden doublet)
  emiss_op = interpolate_emissivity_2D(Tel, nel, temp_arr, dens_arr, yptsi_struct.op)

  ; O++ (O III - bright nebular lines)
  emiss_o2p = interpolate_emissivity_2D(Tel, nel, temp_arr, dens_arr, yptsi_struct.o2p)

  ; ============================================================================
  ; CONVERT TO OBSERVABLE INTENSITIES
  ; ============================================================================
  ; Multiply volume emissivity by column density and convert to Rayleighs
  ; 1 Rayleigh = 10^6 photons/s/cm^2/4π sr (hence the 1d-6 factor)

  sp_intensity = (1d-6) * emiss_sp * Nsp    ; S II lines
  s2p_intensity = (1d-6) * emiss_s2p * Ns2p ; S III lines
  s3p_intensity = (1d-6) * emiss_s3p * Ns3p ; S IV lines
  s4p_intensity = (1d-6) * emiss_s4p * Ns4p ; S V lines
  op_intensity = (1d-6) * emiss_op * Nop    ; O II lines
  o2p_intensity = (1d-6) * emiss_o2p * No2p ; O III lines

  ; ============================================================================
  ; COMBINE WAVELENGTHS AND INTENSITIES
  ; ============================================================================

  xwavi_all = [xwavi_struct.sp, xwavi_struct.s2p, xwavi_struct.s3p, $
    xwavi_struct.s4p, xwavi_struct.op, xwavi_struct.o2p]

  yptsi_all = [sp_intensity, s2p_intensity, s3p_intensity, $
    s4p_intensity, op_intensity, o2p_intensity]

  ; Sort by wavelength
  wsort = sort(xwavi_all)
  xwavi_all = xwavi_all[wsort]
  yptsi_all = yptsi_all[wsort]

  ; ============================================================================
  ; FILTER TO OPTICAL WAVELENGTH RANGE
  ; ============================================================================
  avgwav = (minwav + maxwav)/2.d
  wrange = where(abs(xwavi_all - avgwav) le avgwav - minwav, nlines)

  if nlines gt 0 then begin
    xwavi = xwavi_all[wrange]
    yptsi = yptsi_all[wrange]
  endif else begin
    ; Return empty arrays if no lines in range
    xwavi = [0d]
    yptsi = [0d]
  endelse

  return, yptsi
end

;==============================================================================
function calculate_IPT_emiss_tables_double, Tec, Teh, ne_total, feh, $
  Nsp, Ns2p, Ns3p, Ns4p, Nop, No2p, $
  tec_arr, teh_arr, ne_arr, feh_arr, xwavi_struct, yptsi_struct, $
  min = min, max = max, xwavi=xwavi
  ;+
  ; NAME:
  ;   calculate_IPT_emiss_tables_double
  ;
  ; PURPOSE:
  ;   Calculate optical emission for a DOUBLE Maxwellian electron distribution
  ;   using pre-calculated 4D emission tables.
  ;
  ; INPUTS:
  ;   Tec          - Core (cold) electron temperature [eV]
  ;   Teh          - Hot electron temperature [eV]
  ;   ne_total     - Total electron density [#/cm^3]
  ;   feh          - Fraction of hot electrons (0 to 1)
  ;   Nsp          - S+ column density [#/cm^2]
  ;   Ns2p         - S++ column density [#/cm^2]
  ;   Ns3p         - S+++ column density [#/cm^2]
  ;   Ns4p         - S++++ column density [#/cm^2]
  ;   Nop          - O+ column density [#/cm^2]
  ;   No2p         - O++ column density [#/cm^2]
  ;   tec_arr      - Core temperature grid from tables [eV]
  ;   teh_arr      - Hot temperature grid from tables [eV]
  ;   ne_arr       - Density grid from tables [cm^-3]
  ;   feh_arr      - Hot fraction grid from tables
  ;   xwavi_struct - Structure containing wavelength arrays
  ;   yptsi_struct - Structure containing 4D emissivity tables
  ;
  ; KEYWORDS:
  ;   min      - Minimum wavelength [Angstroms]
  ;   max      - Maximum wavelength [Angstroms]
  ;   xwavi    - OUTPUT: Emission line wavelengths
  ;
  ; PHYSICS:
  ;   Hot electrons have limited impact on optical forbidden lines
  ;   from low-lying metastable levels, but can enhance auroral lines
  ;   from higher energy levels.
  ;-

  ; Set wavelength range for optical
  if keyword_set(max) then maxwav = max else maxwav = 7500d
  if keyword_set(min) then minwav = min else minwav = 3200d

  print, 'Calculating double Maxwellian optical emission using 4D tables...'

  ; ============================================================================
  ; INTERPOLATE 4D EMISSIVITIES FOR EACH ION
  ; ============================================================================

  ; S+
  emiss_sp = interpolate_emissivity_4D(Tec, Teh, ne_total, feh, $
    tec_arr, teh_arr, ne_arr, feh_arr, yptsi_struct.sp)

  ; S++
  emiss_s2p = interpolate_emissivity_4D(Tec, Teh, ne_total, feh, $
    tec_arr, teh_arr, ne_arr, feh_arr, yptsi_struct.s2p)

  ; S+++
  emiss_s3p = interpolate_emissivity_4D(Tec, Teh, ne_total, feh, $
    tec_arr, teh_arr, ne_arr, feh_arr, yptsi_struct.s3p)

  ; S++++
  emiss_s4p = interpolate_emissivity_4D(Tec, Teh, ne_total, feh, $
    tec_arr, teh_arr, ne_arr, feh_arr, yptsi_struct.s4p)

  ; O+
  emiss_op = interpolate_emissivity_4D(Tec, Teh, ne_total, feh, $
    tec_arr, teh_arr, ne_arr, feh_arr, yptsi_struct.op)

  ; O++
  emiss_o2p = interpolate_emissivity_4D(Tec, Teh, ne_total, feh, $
    tec_arr, teh_arr, ne_arr, feh_arr, yptsi_struct.o2p)

  ; ============================================================================
  ; CONVERT TO OBSERVABLE INTENSITIES
  ; ============================================================================

  sp_intensity = (1d-6) * emiss_sp * Nsp
  s2p_intensity = (1d-6) * emiss_s2p * Ns2p
  s3p_intensity = (1d-6) * emiss_s3p * Ns3p
  s4p_intensity = (1d-6) * emiss_s4p * Ns4p
  op_intensity = (1d-6) * emiss_op * Nop
  o2p_intensity = (1d-6) * emiss_o2p * No2p

  ; ============================================================================
  ; COMBINE AND SORT
  ; ============================================================================

  xwavi_all = [xwavi_struct.sp, xwavi_struct.s2p, xwavi_struct.s3p, $
    xwavi_struct.s4p, xwavi_struct.op, xwavi_struct.o2p]

  yptsi_all = [sp_intensity, s2p_intensity, s3p_intensity, $
    s4p_intensity, op_intensity, o2p_intensity]

  ; Sort by wavelength
  wsort = sort(xwavi_all)
  xwavi_all = xwavi_all[wsort]
  yptsi_all = yptsi_all[wsort]

  ; Filter to optical wavelength range
  avgwav = (minwav + maxwav)/2.d
  wrange = where(abs(xwavi_all - avgwav) le avgwav - minwav, nlines)

  if nlines gt 0 then begin
    xwavi = xwavi_all[wrange]
    yptsi = yptsi_all[wrange]
  endif else begin
    xwavi = [0d]
    yptsi = [0d]
  endelse

  return, yptsi
end

;==============================================================================
function simulate_IPT_spectrum_Rayleighs_ERF_form, x, spec_binsize, xwavi, yptsi, $
  fwhm = fwhm
  ;+
  ; NAME:
  ;   simulate_IPT_spectrum_Rayleighs_ERF_form
  ;
  ; PURPOSE:
  ;   Convolve discrete emission lines with DIS/APO instrument response function.
  ;
  ; INPUTS:
  ;   x            - Wavelength grid for output spectrum [Angstroms]
  ;   spec_binsize - Width of wavelength bins [Angstroms] - 0.62 Å for DIS high-res
  ;   xwavi        - Wavelengths of emission lines [Angstroms]
  ;   yptsi        - Intensities of emission lines [Rayleighs]
  ;
  ; KEYWORDS:
  ;   fwhm         - Full Width Half Maximum of Gaussian instrument response [Angstroms]
  ;                  1.86 Å for DIS high-resolution mode (3x bin width)
  ;
  ; METHOD:
  ;   Uses Error Function (ERF) formulation for exact integration of Gaussian
  ;   line profile over finite wavelength bins. Optimized for DIS high-resolution mode.
  ;
  ; DIS CHARACTERISTICS:
  ;   The Dual Imaging Spectrograph at Apache Point Observatory:
  ;   - Simultaneous red and blue channel coverage
  ;   - High resolution mode: ~0.62 Å/pixel
  ;   - Spectral resolution: R ~ 2000-4000 depending on wavelength
  ;   - Excellent for resolving IPT forbidden line doublets
  ;-

  ; Gaussian profile parameters
  ; FWHM = 2σ√(2ln2), so σ = FWHM/(2√(2ln2))
  ; For ERF formulation, we need 1/(σ√2)
  rootc = 2d*sqrt(alog(2d))/fwhm

  ; Get dimensions
  nj = n_elements(x)     ; Number of wavelength bins
  ni = n_elements(yptsi) ; Number of emission lines

  ; Initialize output spectrum
  ypts = dblarr(nj)

  ; Convolve each line with instrument response
  for i=0, ni-1 do begin
    ; Skip lines with zero or negative intensity
    if yptsi[i] le 0 then continue

    ; Calculate contribution using exact ERF integral
    ypts += yptsi(i) * 0.5d * $
      (Erf((x - xwavi(i) + spec_binsize/2d)*rootc) - $
      Erf((x - xwavi(i) - spec_binsize/2d)*rootc))
  endfor

  ; Convert from integrated intensity to intensity per unit wavelength
  ypts /= spec_binsize

  return, ypts
end

;==============================================================================
pro basic_example_optical_cm3_emission_model_use_tables
  ;+
  ; NAME:
  ;   basic_example_optical_cm3_emission_model_use_tables
  ;
  ; PURPOSE:
  ;   Main procedure demonstrating optical emission calculations for the Io Plasma
  ;   Torus using pre-calculated CHIANTI emission tables, optimized for DIS/APO
  ;   observations.
  ;
  ; DESCRIPTION:
  ;   This procedure:
  ;   1. Loads pre-calculated emission tables from .sav files
  ;   2. Sets up typical IPT plasma parameters at ~6 Jupiter radii
  ;   3. Calculates optical emission spectra for single Maxwellian case
  ;   4. Calculates optical emission spectra for double Maxwellian case
  ;   5. Plots the resulting spectra with DIS/APO resolution
  ;
  ; OUTPUTS:
  ;   Creates plots showing simulated optical spectra in Rayleighs/Angstrom
  ;
  ; OBSERVATIONAL CONTEXT:
  ;   Optical observations complement UV by providing:
  ;   - Density diagnostics from forbidden line ratios
  ;   - Temperature diagnostics from auroral/nebular line ratios
  ;   - Abundance measurements from multiple ionization states
  ;   - Ground-based accessibility (unlike UV which requires space telescopes)
  ;
  ; REQUIRED FILES:
  ;   For single Maxwellian:
  ;     CHIANTI_11.0.2_emiss_arrays_all_species_all_wavelengths_50x50_logspaced.sav
  ;   For double Maxwellian:
  ;     CHIANTI_11.0.2_emiss_arrays_all_species_all_wavelengths_15x10x20x10_hote_logspaced.sav
  ;-

  ; ============================================================================
  ; WAVELENGTH GRID SETUP FOR DIS/APO
  ; ============================================================================
  ; Define the wavelength range and resolution for DIS high-resolution mode
  ; Optical range covers major forbidden and permitted S and O emission lines

  min_xwav = 3200d       ; Minimum wavelength [Angstroms] - blue channel limit
  max_xwav = 7500d       ; Maximum wavelength [Angstroms] - red channel limit
  xwav_bin_width = 0.62d ; Spectral bin width [Angstroms] - DIS high-res mode

  ; Calculate number of wavelength bins
  num_xwav_points = floor((max_xwav - min_xwav)/xwav_bin_width) + 1

  ; Create wavelength grid (bin centers)
  xwav = xwav_bin_width*dindgen(num_xwav_points) + min_xwav

  ; ============================================================================
  ; DIS/APO INSTRUMENT PARAMETERS
  ; ============================================================================
  ; Full Width Half Maximum of instrument response function
  ; For DIS high-resolution mode, FWHM ~ 3x pixel size
  fwhm = 1.86d  ; [Angstroms] - 3 × 0.62 Å for DIS high-res

  ; ============================================================================
  ; PLASMA PARAMETERS
  ; ============================================================================
  ; Core/cold electron population parameters
  Tec = 5d        ; Core electron temperature [eV] - typical IPT value
  nec = 2200d     ; Core electron density [#/cm^3] - peak torus density

  ; Hot electron component (suprathermal population)
  Teh = 270d      ; Hot electron temperature [eV] - from wave heating
  feh = 0.0025d   ; Fraction of hot electrons (0.25% typical)
  fec = 1d - feh  ; Fraction of cold electrons

  ; Calculate densities for double Maxwellian
  neh = nec*(1d/fec - 1d)  ; Hot electron density
  ne_total = nec + neh     ; Total electron density

  ; ============================================================================
  ; COLUMN DENSITIES AND ION COMPOSITION
  ; ============================================================================
  ; These correspond to ~6 R_J path length through the Io torus
  ; Based on Nerney et al. 2017 and Steffl et al. 2004b

  Ne_column = 2d14  ; [cm^-2] - integrated electron density along LOS

  ; Ion mixing ratios at 6 R_J (from observations)
  ; Sulfur ion mixing ratios
  Nsp_mixr = 0.06d     ; S+ (S II) - strong optical forbidden lines
  Ns2p_mixr = 0.21d    ; S++ (S III) - dominant S ion, bright optical lines
  Ns3p_mixr = 0.0296d  ; S+++ (S IV) - weaker optical lines
  Ns4p_mixr = 0.003d   ; S++++ (S V) - very weak in optical

  ; Oxygen ion mixing ratios
  Nop_mixr = 0.26d     ; O+ (O II) - strong forbidden doublet
  No2p_mixr = 0.0296d  ; O++ (O III) - bright nebular lines

  ; Calculate ion column densities from mixing ratios
  Nsp = Ne_column*Nsp_mixr    ; S+ column density [cm^-2]
  Ns2p = Ne_column*Ns2p_mixr  ; S++ column density [cm^-2]
  Ns3p = Ne_column*Ns3p_mixr  ; S+++ column density [cm^-2]
  Ns4p = Ne_column*Ns4p_mixr  ; S++++ column density [cm^-2]
  Nop = Ne_column*Nop_mixr    ; O+ column density [cm^-2]
  No2p = Ne_column*No2p_mixr  ; O++ column density [cm^-2]

  ; ============================================================================
  ; LOAD AND CALCULATE SINGLE MAXWELLIAN EMISSION
  ; ============================================================================
  print, ''
  print, '================================================================'
  print, 'SINGLE MAXWELLIAN CALCULATION - OPTICAL'
  print, '================================================================'
  print, 'Loading single Maxwellian emission tables...'

  ; Load the 2D emission tables for single Maxwellian (same tables include optical lines)
  restore, 'CHIANTI_11.0.2_emiss_arrays_all_species_all_wavelengths_50x50_logspaced.sav'
  ; Restored variables: DENS_ARR, TEMP_ARR, XWAVI, YPTSI

  print, 'Tables loaded successfully:'
  print, '  Temperature range: ', min(temp_arr), ' - ', max(temp_arr), ' eV'
  print, '  Density range: ', min(dens_arr), ' - ', max(dens_arr), ' cm^-3'
  print, '  Grid size: ', n_elements(temp_arr), ' x ', n_elements(dens_arr)

  yptsi_single_maxwellian = calculate_IPT_emiss_tables_single(Tec, nec, $
    Nsp, Ns2p, Ns3p, Ns4p, Nop, No2p, $
    temp_arr, dens_arr, xwavi, yptsi, $
    min = min_xwav, max = max_xwav, xwavi=xwavi_single)

  ; Convolve with DIS instrument response
  ypts_single_maxwellian = simulate_IPT_spectrum_Rayleighs_ERF_form( $
    xwav, xwav_bin_width, xwavi_single, yptsi_single_maxwellian, fwhm = fwhm)

  ; ============================================================================
  ; LOAD AND CALCULATE DOUBLE MAXWELLIAN EMISSION
  ; ============================================================================
  print, ''
  print, '================================================================'
  print, 'DOUBLE MAXWELLIAN CALCULATION - OPTICAL'
  print, '================================================================'
  print, 'Loading double Maxwellian emission tables...'

  ; Load the 4D emission tables for double Maxwellian
  restore, 'CHIANTI_11.0.2_emiss_arrays_all_species_all_wavelengths_15x10x20x10_hote_logspaced.sav'
  ; Restored variables: TEC_ARR, TEH_ARR, NE_ARR, FEH_ARR, XWAVI, YPTSI

  print, 'Tables loaded successfully:'
  print, '  Core temperature range: ', min(tec_arr), ' - ', max(tec_arr), ' eV'
  print, '  Hot temperature range: ', min(teh_arr), ' - ', max(teh_arr), ' eV'
  print, '  Density range: ', min(ne_arr), ' - ', max(ne_arr), ' cm^-3'
  print, '  Hot fraction range: ', min(feh_arr), ' - ', max(feh_arr)
  print, '  Grid size: ', n_elements(tec_arr), ' x ', n_elements(teh_arr), $
    ' x ', n_elements(ne_arr), ' x ', n_elements(feh_arr)

  yptsi_double_maxwellian = calculate_IPT_emiss_tables_double( $
    Tec, Teh, ne_total, feh, $
    Nsp, Ns2p, Ns3p, Ns4p, Nop, No2p, $
    tec_arr, teh_arr, ne_arr, feh_arr, xwavi, yptsi, $
    min = min_xwav, max = max_xwav, xwavi=xwavi_double)

  ; Convolve with DIS instrument response
  ypts_double_maxwellian = simulate_IPT_spectrum_Rayleighs_ERF_form( $
    xwav, xwav_bin_width, xwavi_double, yptsi_double_maxwellian, fwhm = fwhm)

  ; ============================================================================
  ; DEFINE KEY DIAGNOSTIC LINES TO MARK
  ; ============================================================================
  ; Key optical diagnostic lines for IPT
  key_lines_wav = [3727.5d, 4959d, 5007d, 6312d, 6716d, 6731d]
  key_lines_label = ['[O II] 3726,3729', '[O III] 4959', '[O III] 5007', $
    '[S III] 6312', '[S II] 6716', '[S II] 6731']

  ; ============================================================================
  ; PLOT RESULTS WITH KEY LINES MARKED
  ; ============================================================================
  ; Create publication-quality plots showing the simulated optical spectra

  ; Single Maxwellian plot
  p1 = plot(xwav, ypts_single_maxwellian, $
    xtitle='Wavelength (Å)', $
    ytitle='Intensity (Rayleighs/Å)', $
    title='IPT Optical Emission (DIS/APO): Single Maxwellian (T$_{e}$=' + $
    string(Tec,format='(F4.1)') + ' eV, n$_{e}$=' + $
    string(nec,format='(F6.0)') +' cm$^{-3}$)', $
    thick=1, color='blue', $
    xrange=[min_xwav, max_xwav], $
    font_size=11)

  ; Mark key diagnostic lines
  for i=0, n_elements(key_lines_wav)-1 do begin
    !null = plot([key_lines_wav[i], key_lines_wav[i]], p1.yrange, $
      '--', color='gray', /overplot, transparency=70)
  endfor

  ; Double Maxwellian plot
  p2 = plot(xwav, ypts_double_maxwellian, $
    xtitle='Wavelength (Å)', $
    ytitle='Intensity (Rayleighs/Å)', $
    title='IPT Optical Emission (DIS/APO): Double Maxwellian (T$_{ec}$=' + $
    string(Tec,format='(F4.1)') + ' eV, T$_{eh}$=' + $
    string(Teh,format='(F5.0)') + ' eV, f$_{eh}$=' + $
    string(feh,format='(F6.4)') + ')', $
    thick=1, color='red', $
    xrange=[min_xwav, max_xwav], $
    font_size=11)

  ; Mark key diagnostic lines
  for i=0, n_elements(key_lines_wav)-1 do begin
    !null = plot([key_lines_wav[i], key_lines_wav[i]], p2.yrange, $
      '--', color='gray', /overplot, transparency=70)
  endfor

  ; ============================================================================
  ; COMPARISON PLOT
  ; ============================================================================
  ; Direct comparison of single vs double Maxwellian in optical

  p3 = plot(xwav, ypts_single_maxwellian, $
    xtitle='Wavelength (Å)', $
    ytitle='Intensity (Rayleighs/Å)', $
    title='IPT Optical Emission Comparison (DIS/APO): Single vs Double Maxwellian', $
    thick=1, color='blue', $
    name='Single Maxwellian', $
    xrange=[min_xwav, max_xwav], $
    font_size=11)

  p3b = plot(xwav, ypts_double_maxwellian, $
    /overplot, $
    thick=1, color='red', $
    name='Double Maxwellian', $
    transparency=30)

  ; Mark key diagnostic lines
  for i=0, n_elements(key_lines_wav)-1 do begin
    !null = plot([key_lines_wav[i], key_lines_wav[i]], p3.yrange, $
      '--', color='gray', /overplot, transparency=80)
  endfor

  ; Add legend
  leg = legend(target=[p3, p3b], $
    position=[0.75, 0.85], $
    /normal, $
    font_size=10)

  ; ============================================================================
  ; ZOOM PLOTS FOR KEY DIAGNOSTIC REGIONS
  ; ============================================================================
  ; Create zoomed plots for important diagnostic line regions

  ; Region 1: [O II] 3726,3729 doublet
  w_region = where(xwav ge 3700d and xwav le 3750d, nw_region)
  if nw_region gt 0 then begin
    p4 = plot(xwav[w_region], ypts_single_maxwellian[w_region], $
      xtitle='Wavelength (Å)', $
      ytitle='Intensity (R/Å)', $
      title='[O II] 3726,3729 Doublet Region', $
      thick=1.5, color='blue', $
      name='Single', $
      font_size=10)
    p4b = plot(xwav[w_region], ypts_double_maxwellian[w_region], $
      /overplot, $
      thick=1.5, color='red', $
      name='Double')
    leg4 = legend(target=[p4, p4b], position=[0.8, 0.8], /normal, font_size=9)
  endif

  ; Region 2: [O III] 4959,5007 nebular lines
  w_region = where(xwav ge 4900d and xwav le 5050d, nw_region)
  if nw_region gt 0 then begin
    p5 = plot(xwav[w_region], ypts_single_maxwellian[w_region], $
      xtitle='Wavelength (Å)', $
      ytitle='Intensity (R/Å)', $
      title='[O III] 4959,5007 Nebular Lines', $
      thick=1.5, color='blue', $
      name='Single', $
      font_size=10)
    p5b = plot(xwav[w_region], ypts_double_maxwellian[w_region], $
      /overplot, $
      thick=1.5, color='red', $
      name='Double')
    leg5 = legend(target=[p5, p5b], position=[0.8, 0.8], /normal, font_size=9)
  endif

  ; Region 3: [S III] 6312 auroral line
  w_region = where(xwav ge 6290d and xwav le 6330d, nw_region)
  if nw_region gt 0 then begin
    p6 = plot(xwav[w_region], ypts_single_maxwellian[w_region], $
      xtitle='Wavelength (Å)', $
      ytitle='Intensity (R/Å)', $
      title='[S III] 6312 Auroral Line', $
      thick=1.5, color='blue', $
      name='Single', $
      font_size=10)
    p6b = plot(xwav[w_region], ypts_double_maxwellian[w_region], $
      /overplot, $
      thick=1.5, color='red', $
      name='Double')
    leg6 = legend(target=[p6, p6b], position=[0.8, 0.8], /normal, font_size=9)
  endif

  ; Region 4: [S II] 6716,6731 doublet (density diagnostic)
  w_region = where(xwav ge 6700d and xwav le 6750d, nw_region)
  if nw_region gt 0 then begin
    p7 = plot(xwav[w_region], ypts_single_maxwellian[w_region], $
      xtitle='Wavelength (Å)', $
      ytitle='Intensity (R/Å)', $
      title='[S II] 6716,6731 Doublet (Density Diagnostic)', $
      thick=1.5, color='blue', $
      name='Single', $
      font_size=10)
    p7b = plot(xwav[w_region], ypts_double_maxwellian[w_region], $
      /overplot, $
      thick=1.5, color='red', $
      name='Double')
    leg7 = legend(target=[p7, p7b], position=[0.8, 0.8], /normal, font_size=9)
  endif

  ; ============================================================================
  ; SUMMARY OUTPUT
  ; ============================================================================
  print, ''
  print, '================================================================'
  print, 'SIMULATION COMPLETE - OPTICAL TABLE-BASED VERSION'
  print, '================================================================'
  print, 'Instrument Configuration:'
  print, '  Telescope: Apache Point Observatory 3.5m'
  print, '  Instrument: DIS (Dual Imaging Spectrograph)'
  print, '  Mode: High resolution'
  print, '  Pixel scale:', xwav_bin_width, ' Å/pixel'
  print, '  Resolution (FWHM):', fwhm, ' Å'
  print, '  Wavelength range:', min_xwav, ' -', max_xwav, ' Å'
  print, ''
  print, 'Plasma parameters used:'
  print, '  Single Maxwellian: Te =', Tec, ' eV, ne =', nec, ' cm^-3'
  print, '  Double Maxwellian: Tec =', Tec, ' eV, Teh =', Teh, ' eV'
  print, '                     feh =', feh, ', ne_total =', ne_total, ' cm^-3'
  print, ''
  print, 'Column densities [cm^-2]:'
  print, '  S+   :', Nsp
  print, '  S++  :', Ns2p
  print, '  S+++ :', Ns3p
  print, '  S++++:', Ns4p
  print, '  O+   :', Nop
  print, '  O++  :', No2p
  print, ''
  print, 'Number of emission lines in optical range:'
  print, '  Single Maxwellian:', n_elements(xwavi_single)
  print, '  Double Maxwellian:', n_elements(xwavi_double)
  print, ''
  print, 'Variables available for inspection:'
  print, '  xwav                    - wavelength grid'
  print, '  ypts_single_maxwellian  - single Maxwellian spectrum'
  print, '  ypts_double_maxwellian  - double Maxwellian spectrum'
  print, '  xwavi_single/double     - emission line wavelengths'
  print, '  yptsi_single/double     - emission line intensities'
  print, ''
  print, 'Key diagnostic line ratios can be calculated from the results:'
  print, '  - [S II] 6731/6716 for electron density'
  print, '  - [S III] 6312/9069 for electron temperature'
  print, '  - [O II] 3729/3726 for density in low-density limit'
  print, '  - [O III] 4363/(4959+5007) for temperature'

end